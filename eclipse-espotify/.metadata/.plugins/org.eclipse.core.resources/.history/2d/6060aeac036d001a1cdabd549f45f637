package com.espotify.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.espotify.model.ConnectionManager;
import com.espotify.model.Usuario;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class UsuarioDAO {
	private final static String INSERT_QUERY = "INSERT INTO Reproductor_musica.Usuario (mail, descripcion, nombre, password, id) VALUES (?,?,?,?,0)";
	private final static String CHANGE_INFO_QUERY = "UPDATE Reproductor_musica.Usuario SET nombre=?, descripcion=? WHERE mail = ?";
	
	/**
	 * Registra un usuario nuevo en la base de datos.
	 * @param nombre
	 * @param email
	 * @param contrasena
	 * @param descripcion
	 * @return
	 */
	
	public boolean register(String nombre,String email, String contrasena, String descripcion) {
		
		try {
			Connection conn = ConnectionManager.getConnection();

			PreparedStatement ps = conn.prepareStatement(INSERT_QUERY);
			
			ps.setString(1, email);
			ps.setString(2, descripcion);
			ps.setString(3, nombre);
			
			String pass_HASH = convertirSHA256(contrasena);
			ps.setString(4, pass_HASH);
			
			ps.executeUpdate();
			
			ConnectionManager.releaseConnection(conn);
			return true;
		} catch(SQLException se) {
			System.out.println(se.getMessage());
			return false;
		} catch(Exception e) {
			e.printStackTrace(System.err);
		}
		
		return false;
	}

	public static boolean cambiar_info(String nombre, String descripcion, String email, String id_email) {
	
		try {
			Connection conn = ConnectionManager.getConnection();
			PreparedStatement ps = conn.prepareStatement(CHANGE_INFO_QUERY);
			
			ps.setString(1, nombre);
			ps.setString(2, descripcion);
			ps.setString(3, email);
			ps.setString(4, id_email);
	
			ps.executeUpdate();
			
			ConnectionManager.releaseConnection(conn);
			return true;
		} catch(SQLException se) {
			se.printStackTrace();
			return false;
		} catch(Exception e) {
			e.printStackTrace(System.err);
		}
		return false;
	}
	
	
	public static String convertirSHA256(String password) {
		MessageDigest md = null;
		try {
			md = MessageDigest.getInstance("SHA-256");
		} 
		catch (NoSuchAlgorithmException e) {		
			e.printStackTrace();
			return null;
		}
		    
		byte[] hash = md.digest(password.getBytes());
		StringBuffer sb = new StringBuffer();
		    
		for(byte b : hash) {        
			sb.append(String.format("%02x", b));
		}
		    
		return sb.toString();
	}
}

